#include <Command.h>
#include <Connect.h>
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <sensor_msgs/JointState.h>
#include <moveit_msgs/MoveGroupActionGoal.h>

void arm_command_callback(const sensor_msgs::JointState& arm_moveit_result)
{
	

int main(int argc, char ** argv)
{
	ros::init(argc, argv, "tcp2ros_driver");
	ros::NodeHandle n;
	//ros::Publisher arm_feedback_pub = n.advertise<std_msgs::String>("arm_feedback", 1000);
	ros::Publisher joint_state_pub  = n.advertise<sensor_msgs::JointState>("joint_states",1000);	
	
	ros::Subscriber arm_command_sub = n.subscribe("/move_group/goal",1000,arm_command_callback);
	
	Connection* m_connect;
	m_connect = new Connection;

	if(m_connect->Oninit("192.168.1.114",10000))
	{
		cout<<"connect success!"<<endl;
	}
	else
	{
		cout<<"connect failed!"<<endl;
	}
	
	Command* m_command;
	m_command = new Command;
	//m_command->SetCommandSock(m_connect->GetSock());
	m_command->RegisterCommand("100");
	
	char* arm_feedback_rcvbuffer;
	arm_feedback_rcvbuffer = new char[4096 * 5];

	double arm_ptz = 0.0 , arm_joint1 = 0.0 , arm_joint2 = 0.0 , arm_stretch = 0.0;
	double arm_pitch = 0.0 , arm_roll = 0.0 , arm_gripper = 0.0;

	ros::Time current_time, last_time;
	current_time = ros::Time::now();
	last_time = ros::Time::now();

	long count = 0;
	
	ros::Rate r(5.0);
	while(n.ok())
	{
		current_time = ros::Time::now();

		m_connect->recvMsg();
		bzero(arm_feedback_rcvbuffer, 4096*5);
		memmove(arm_feedback_rcvbuffer, m_connect->rcvbuffer, m_connect->recv_size);
		string str(arm_feedback_rcvbuffer);

		int p1, p2;
		p1 = str.find("ARMSETV3 {Type Direct} {Name Position}");
		if(p1 < 0)
		{
			ROS_INFO("can't find arm feedback data");
			continue;
		}
		else
		{
			p1 = str.find("{PTZ" , p1);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_ptz = atof(temp.c_str())/1000.0;
			
			p1 = str.find("{Joint1" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_joint1 = atof(temp.c_str())/1000.0;

			p1 = str.find("{Joint2" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_joint2 = atof(temp.c_str())/1000.0;

			p1 = str.find("{Stretch" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_stretch = atof(temp.c_str())/1000.0;

			p1 = str.find("{Pitch" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_pitch = atof(temp.c_str())/1000.0;

			p1 = str.find("{Roll" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_roll = atof(temp.c_str())/1000.0;

			p1 = str.find("{Gripper" , p2);
			p2 = str.find("}", p1);
			temp = str.substr(p1 + 6, p2 - p1 -6);
			arm_gripper = atof(temp.c_str())/1000.0;
		}
	

		sensor_msgs::JointState arm_feedback_msg;
		arm_feedback_msg.position[0] = arm_ptz;
		arm_feedback_msg.position[1] = arm_joint1;
		arm_feedback_msg.position[2] = arm_joint2;
		arm_feedback_msg.position[3] = arm_pitch;
		arm_feedback_msg.position[4] = arm_roll;
		arm_feedback_msg.position[5] = arm_gripper;
		
		for( int i = 0; i < 5; i++)
			ROS_INFO("arm_joint%d_position:%f",i,arm_feedback_msg.position[i]);

		joint_state_pub.publish(arm_feedback_msg);
		/*std_msgs::String arm_feedback_msg;

		std::stringstream temp_msg;
		temp_msg<<"ARMSETV3 {Type Direct} {Name Position}"<<" {PTZ "<<arm_ptz<<"} {Joint1 "<<arm_joint1<<"} {Joint2 "<<arm_joint2<<"} {Stretch "<<arm_stretch<<"} {Pitch "<<arm_pitch<<"} {Roll "<<arm_roll<<"} {Gripper "<<arm_gripper<<"}\r\n";
		arm_feedback_msg.data = temp_msg.str();
		
		ROS_INFO("%s", arm_feedback_msg.c_str());

		arm_feedback_pub.publish(arm_feedback_msg);*/

		ros::spinOnce();
		loop_rate.sleep();
		++count;
	}

	return 0;
}
